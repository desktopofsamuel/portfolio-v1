{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"C:/Users/daredevil/Documents/Code/samuel_site/src/blogs/2018-10-31 2018 October Update/index.md absPath of file >>> MarkdownRemark","html":"<p>It was a challenging yet rewarding period in the last two months. I have set up the bare-bones structure of my personal site, yet it was a long way until perfect. Without much resources on the Internet, coming up with a decent design and functional website is a long learning process. In the last two months, I have managed to: </p>\n<ul>\n<li>Revamped landing page with new design and content. I have added my service section and an about section with <a href=\"http://react-simple-maps.io\">React Simple Map</a> as background (but it could function so much more)</li>\n<li>Revamped work page design. The section background is dynamic now to match every projects' brand color (manually input from the markdown files).</li>\n<li>Added mobile navigation and animation with some icons that I drew.</li>\n<li>Added 404 Page. One small step for man, one giant leap for mankind.</li>\n<li>Added <a href=\"http://localhost:8000/categories/ui-ux-design\">Work Category Page</a>, each service can be viewed individually with relevant projects</li>\n<li>Enhanced landing page experience by cool reveal animation using <a href=\"https://www.react-reveal.com/\">React-Reveal</a></li>\n<li>Enhanced scroll animation using <a href=\"https://github.com/mauricevancooten/react-anchor-link-smooth-scroll\">React Anchor Link Smooth Scroll</a> when you click Get In Touch on landing page</li>\n<li>Enhanced blog reading experience especially with code block. Code will highlight according to the language using <a href=\"https://www.gatsbyjs.org/packages/gatsby-remark-prismjs/\">Gatsby-Remark-PrismicJS</a></li>\n<li>Enhanced footer design by replacing the author component, also added social media links and contact access.</li>\n<li>All blog posts have a feature image now on the top</li>\n<li>Fixed related post referenced to <a href=\"https://github.com/Vagr9K/gatsby-material-starter/blob/master/gatsby-node.js\">Gatsby Material Starter</a> node.js</li>\n<li>Fixed code block overflow problem in blog</li>\n<li>Fixed Footer Width Problem</li>\n<li>Fixed Tag &#x26; Category with multiple words in slug using <a href=\"https://lodash.com/docs#kebabCase\">kebabCase</a></li>\n</ul>","excerpt":"It was a challenging yet rewarding period in the last two months. I have set up the bare-bones structure of my personal site, yet it was a long way until perfect. Without much resources on the Internet, coming up with a decent design and functional…","frontmatter":{"title":"desktopofsamuel.com October Update","date":"Oct 31, 2018","tags":["Work In Progress","gatsby"],"path":"/2018-Oct-Update"}}},{"node":{"id":"C:/Users/daredevil/Documents/Code/samuel_site/src/blogs/2018-09-07 Building Gatsby With Mutliple Post Type/index.md absPath of file >>> MarkdownRemark","html":"<p><strong>2018/10/25: Updated the post on how to create Category and Tag page for multiple post type.</strong></p>\n<p>TLDR: I'm sharing my way of setting up multiple post types in GatsbyJS. It works for portfolio setup with blog + projects. </p>\n<p>As a designer with no prior experience in React, starting Gatsby with a starter template is the easiest way. After that, adding bits and pieces by following online tutorials and Github threads are the parts that you learn, as you understand how to adapt others' code and review each expression and argument means whenever you encounter errors.</p>\n<h2>Use Case</h2>\n<p>I'm setting up my Gatsby to support multiple post types, as I want to display my blog articles and projects at the same time. It is useful for personal / agency site setup. Since all posts will be rendered by markdown files, they will be saved in different source folders for simplicity.   </p>\n<h2>What To Do</h2>\n<p>Let me explain the whole process verbally since there are only a few tutorials online. For the record, this assumed you have an existing Gatsby blog already.  </p>\n<p>Things we need to do:</p>\n<ol>\n<li>Create a new \"projects\" folder and post under source folder</li>\n<li>Edit <code class=\"language-text\">gatsby-config.js</code> to include new source folder in <code class=\"language-text\">gatsby-source-filesystem</code> plugin</li>\n<li>Duplicate <code class=\"language-text\">blog-post.js</code> to create <code class=\"language-text\">project-post.js</code> template</li>\n<li>Edit <code class=\"language-text\">gatsby-node.js</code> CreatePage API to adopt a separate template for different post type. </li>\n<li>Create Project Main page to query project post</li>\n<li>Edit Blog Main page not to query project post</li>\n<li>Create Tag &#x26; Category Page for Project</li>\n</ol>\n<h2>1. Create New Projects Folder</h2>\n<p>My source folder setup is like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">src\n——blogs\n    —— Blog Post #1\n\t\t——index.md\n\t\t——photo1.jpg\n——projects\n\t——Project #1\n\t\t——index.md\n\t\t——photo2.jpg \t\n——templates\n\t\t——blog-post.js\n\t\t——project-post.js</code></pre></div>\n<p>All blog posts and project posts will be grouped in separated folders, with individual project post named <code class=\"language-text\">index.md</code>, together with a feature photo. In this scenario, all project files will require a feature photo since it will be displayed on Project Main page. </p>\n<p>For frontmatter of the markdown, I have added a new field called \"Posttype\", those specified as <code class=\"language-text\">posttype: project</code> will be queried later in project main page. Those without will be recognized as a blog post.</p>\n<p>My markdown frontmatter setup is:</p>\n<div class=\"gatsby-highlight\" data-language=\"markdown\"><pre class=\"language-markdown\"><code class=\"language-markdown\">path: \"/project-1\"\ndate: \"2018-09-07\"\ntitle: \"Project 1\"\ntags: [\"app\", \"design\"]\nposttype: \"project\"\nimage: \"./project-1.png\"</code></pre></div>\n<h2>2. Edit Gatsby-Config.js</h2>\n<p>We will need to edit gatsby-config.js in order to let Gatsby know where to look when creating a new post page. </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  resolve<span class=\"token punctuation\">:</span> <span class=\"token string\">'gatsby-source-filesystem'</span><span class=\"token punctuation\">,</span>\n  options<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    path<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>__dirname<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/src/projects`</span></span><span class=\"token punctuation\">,</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">'project'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<h2>3. Create Project Post Template</h2>\n<p>Then, we will need to create a Project Post template <code class=\"language-text\">project-post.js</code>, putting in my template (src/templates) folder together with <code class=\"language-text\">blog-post.js</code>, so later <code class=\"language-text\">gatsby-node.js</code> can reference to when creating project pages.</p>\n<p>Let's copy everything in <code class=\"language-text\">blog-post.js</code> and paste it in Project Post. This will ensure everything works accordingly. However, you will only need to rename the GraphQL query name, since all GraphQL query need to have unique name. I changed from \"BlogPostByPath\" to \"ProjectPostByPath\". We can come back and edit it later. </p>\n<h2>4. Edit Gatsby-Node.js</h2>\n<p><strong>Being a static site generator, Gatsby-Node.js handles how your site is generated.</strong> Personally speaking, it is a rather confusing part of the whole Gatsby development process.</p>\n<p>CreatePages should be in the file already. </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">exports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">createPages</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>boundActionCreators<span class=\"token punctuation\">,</span> graphql<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> createPage <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> boundActionCreators</code></pre></div>\n<p>We will need to import the <code class=\"language-text\">project-post.js</code>right after the blog template. </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> postTemplate <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'src/templates/blog-post.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> projectTemplate <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'src/templates/project-post.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>After that, we will use our newly created frontmatter field, \"posttype\" to filter all our markdown pages. Because a majority of markdown pages will be blog page, if / else argument is used here. Unless specified post \"posttype\" is equal to \"project\" (or any other posttype to be included in the future), or else Gatsby will recognise the post as a blog post.</p>\n<p>Here's my <code class=\"language-text\">gatsby-node.js</code> file:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>allMarkdownRemark<span class=\"token punctuation\">.</span>edges<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>edge <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>edge<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>frontmatter<span class=\"token punctuation\">.</span>posttype <span class=\"token operator\">===</span> <span class=\"token string\">'project'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">createPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            path<span class=\"token punctuation\">:</span> edge<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>frontmatter<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">,</span>\n            component<span class=\"token punctuation\">:</span> projectTemplate<span class=\"token punctuation\">,</span>\n            context<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>   \n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">createPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            path<span class=\"token punctuation\">:</span> edge<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>frontmatter<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">,</span>\n            component<span class=\"token punctuation\">:</span> postTemplate<span class=\"token punctuation\">,</span>\n            context<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>    </code></pre></div>\n<p>Remember you will need starting the site again with the command <code class=\"language-text\">gatsby-develop</code> at the terminal since hot reload does not cover the gatsby-node.js page.</p>\n<p>If you have successfully <code class=\"language-text\">gatsby-develop</code> the site, let's go to the project post path to make sure it is working. You should be seeing a blog post with your project content. Now you may adjust the project post template to suit your needs.</p>\n<p>Right now this method is not creating a prefix path in front of the project post. So there might be a chance that project post shares the same path with a blog post. I'm still looking for a solution, feel free to suggest any. </p>\n<h2>5. Create Project Main Page</h2>\n<p>Now the individual post is done, let's work on a Project Main page that will query all project post. </p>\n<p>First, all the standards:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> Link <span class=\"token keyword\">from</span> <span class=\"token string\">'gatsby-link'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ProjectPage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">.</span>allMarkdownRemark<span class=\"token punctuation\">.</span>edges<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>post <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>div key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span> post<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>id <span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span>Img sizes<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>frontmatter<span class=\"token punctuation\">.</span>image<span class=\"token punctuation\">.</span>childImageSharp<span class=\"token punctuation\">.</span>sizes<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span>Link to<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>frontmatter<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">}</span> <span class=\"token operator\">></span>\n                    <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>frontmatter<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Link<span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>excerpt<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">/</span><span class=\"token operator\">>></span>\n\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> pageQuery <span class=\"token operator\">=</span> graphql`</code></pre></div>\n<p>Then we will add our GraphQL query at the end, notice I have filtered using the frontmatter, only those markdown files with assigned \"project\" as a post type will display. </p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">query</span> ProjectIndex <span class=\"token punctuation\">{</span>\n  allMarkdownRemark<span class=\"token punctuation\">(</span>\n      <span class=\"token attr-name\">sort</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token attr-name\">order</span><span class=\"token punctuation\">:</span> DESC<span class=\"token punctuation\">,</span> <span class=\"token attr-name\">fields</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>frontmatter___date<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> \n      <span class=\"token attr-name\">filter</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token attr-name\">frontmatter</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token attr-name\">posttype</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token attr-name\">eq</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"project\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    edges <span class=\"token punctuation\">{</span>\n      node <span class=\"token punctuation\">{</span>\n        id\n        excerpt<span class=\"token punctuation\">(</span><span class=\"token attr-name\">pruneLength</span><span class=\"token punctuation\">:</span> <span class=\"token number\">250</span><span class=\"token punctuation\">)</span>\n        frontmatter <span class=\"token punctuation\">{</span>\n          path\n          title\n          date\n          tags\n          image <span class=\"token punctuation\">{</span>\n            childImageSharp <span class=\"token punctuation\">{</span>\n              sizes<span class=\"token punctuation\">(</span><span class=\"token attr-name\">maxWidth</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1140</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                base64\n                aspectRatio\n                src\n                srcSet\n                srcWebp\n                srcSetWebp\n                sizes\n                originalImg\n                originalName\n              <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Remember to add <code class=\"language-text\">export default ProjectPage</code></p>\n<h2>6. Edit Blog Main</h2>\n<p>Then if you go to Blog Main page, you would still see a mix of blog posts and projects. That is because you will need to filter the GraphQL as well. </p>\n<p>Because we use if/else function in <code class=\"language-text\">gatsby-node.js</code>, stating all post without specifying posttype will be a blog post. We cannot query this page using frontmatter's post type,  we will use the filter function base on the Markdown's path.</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\">allMarkdownRemark <span class=\"token punctuation\">(</span>\n        <span class=\"token attr-name\">sort</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token attr-name\">order</span><span class=\"token punctuation\">:</span> DESC<span class=\"token punctuation\">,</span> <span class=\"token attr-name\">fields</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>frontmatter___date<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token attr-name\">filter</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token attr-name\">fileAbsolutePath</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token attr-name\">regex</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\\/blogs/\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span></code></pre></div>\n<h2>7. Creating Tag &#x26; Category Page</h2>\n<p>Last but not least, we'll need to double check other components will not mix up with different post type. This is very dependable on how do you want different content type to work. In my case, I would like to separate the taxonomy between blog and portfolio. Therefore, I use different frontmatter for different post type. </p>\n<p>I use tag for blog and category for portfolio, Tag page would be a collection of articles that I have written regarding the certain topic, while Category page would be my field of work. To set this up, I have referenced <a href=\"https://github.com/Vagr9K/gatsby-material-starter/blob/master/gatsby-node.js\">Gatsby Material Starter</a>. It allows us to create Tag &#x26; Category page as long as the frontmatter is in an array format. </p>\n<div class=\"gatsby-highlight\" data-language=\"markdown\"><pre class=\"language-markdown\"><code class=\"language-markdown\">category: [ \"UI/UX Design\", \"Brand Design\" ]</code></pre></div>\n<p>In your <code class=\"language-text\">gatsby-node.js</code> after resolving the GraphQL. Create tag set and category set to create page for each tag and category.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//gatsby-node.js</span>\n<span class=\"token keyword\">const</span> tagSet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> categorySet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>allMarkdownRemark<span class=\"token punctuation\">.</span>edges<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>edge <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>edge<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>frontmatter<span class=\"token punctuation\">.</span>tags<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          edge<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>frontmatter<span class=\"token punctuation\">.</span>tags<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>tag <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            tagSet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token punctuation\">{</span><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>edge<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>frontmatter<span class=\"token punctuation\">.</span>category<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          edge<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>frontmatter<span class=\"token punctuation\">.</span>category<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>category <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            categorySet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>category<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n        \n      <span class=\"token keyword\">const</span> tagList <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span>tagSet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      tagList<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>tag <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">createPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n          path<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`/tags/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>_<span class=\"token punctuation\">.</span><span class=\"token function\">kebabCase</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/`</span></span><span class=\"token punctuation\">,</span>\n          component<span class=\"token punctuation\">:</span> tagPage<span class=\"token punctuation\">,</span>\n          context<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            tag\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      \n      <span class=\"token keyword\">const</span> categoryList <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span>categorySet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      categoryList<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>category <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">createPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n          path<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`/categories/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>_<span class=\"token punctuation\">.</span><span class=\"token function\">kebabCase</span><span class=\"token punctuation\">(</span>category<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/`</span></span><span class=\"token punctuation\">,</span>\n          component<span class=\"token punctuation\">:</span> categoryPage<span class=\"token punctuation\">,</span>\n          context<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            category\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In project template page, if you want to add a hyperlink to the category page, you can map the categories after query GraphQL. If you copied everything from <code class=\"language-text\">blog-post.js</code> , remember to change tags to category in GraphQL query. I used kebabCase to process category text into hyperlink friendly text. </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//project-post.js</span>\n<span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">.</span>frontmatter<span class=\"token punctuation\">.</span>category<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>category<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>span key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>index<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Link to<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token string\">`/categories/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">kebabCase</span><span class=\"token punctuation\">(</span>category<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>small<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>category<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>small<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Link<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>This should wrap up everything you need in order to create multiple post type in Gatsby. If you encountered any problems in setting it up. Make sure you:  </p>\n<ol>\n<li>Restart localhost server every time if you have edited the <code class=\"language-text\">gatsby-node.js</code></li>\n<li>Test it step by step to eliminate any cause of error. </li>\n</ol>\n<p>For designers who are looking forward to build your first Gatsby site, I recommend look for the functionalities offered by starter template instead of style and layout. This will save so much time. Changing CSS and moving around different React component is much easier than figuring how node.js work. </p>\n<p>Feel free to share your ways of creating your own personal site using Gatsby. If you have a better solution or encountered any problems, I would love to know the case.</p>","excerpt":"2018/10/25: Updated the post on how to create Category and Tag page for multiple post type. TLDR: I'm sharing my way of setting up multiple post types in GatsbyJS. It works for portfolio setup with blog + projects.  As a designer with no prior…","frontmatter":{"title":"Building Gatsby With Multiple Post Type","date":"Sep 17, 2018","tags":["Work In Progress","Gatsby"],"path":"/building-gatsby-with-multiple-post-type"}}},{"node":{"id":"C:/Users/daredevil/Documents/Code/samuel_site/src/blogs/2018-08-27 Why designers need a personal website/index.md absPath of file >>> MarkdownRemark","html":"<p>TLDR: I'm summing up the reasons why a designer should build a custom site using Gatsby.JS. </p>\n<p>One of my year resolution for 2018 is to learn front-end coding. I feel that being a designer, learning how to code is the way how I could step up the game in web design, by understanding how every bit and piece fall into places. </p>\n<p><img src=\"./Framev2.jpg\"></p>\n<p>I had two personal websites, one is my Tumblr and another is my portfolio site, separately hosted and running <a href=\"https://cargocollective.com/\">Cargo Collective</a>. But I was thinking, \"Wouldn't it be great if both of my portfolio and blog are together?\"</p>\n<h2>Why do you need a personal website?</h2>\n<p>It's 2018. Online presence is becoming the norm, even in the professional field. Your previous work, your side projects, even your work in progress matter. </p>\n<p>A personal site also means more control over your message and story, whether you're looking for new clients, landing a dream job or establishing a personal brand. For sure it takes more time and effort, but I think it is quite a good practice to sharpen your skill and catching up. Needless to say, making a personal site is much easier than a decade ago. </p>\n<p>While platforms like Medium, Facebook Pages are building homogeneous style for coherent browsing / reading experience. Your website should pursue personality instead. I'm not saying you shouldn't post to Medium publications or run a Facebook Page, but just not as the destination but a way to reach your very own website where you deliver your message. </p>\n<h2>What're my options?</h2>\n<p>Speaking of the BIG question, which platform should you choose? Wordpress is great for beginners since all settings are visible without dealing with code. But it was developed as a blogging platform, so it requires specific template in order to create a decent looking personal page. </p>\n<p>Website builder like <a href=\"https://webflow.com/?rfsn=1574887.557b84\">Webflow</a> and <a href=\"http://squarespace.com/\">Squarespace</a> is also an elegant option, but they adopt subscription model so the cost would be definitely higher.  </p>\n<p>After taking the <a href=\"http://designcode.io/\">Design+Code's</a> React course instructed by Meng To, I was introduced to <a href=\"https://www.gatsbyjs.org/\">Gatsby.JS</a>. After trying it out for few weeks, I genuinely rooting it as the up-and-coming personal website &#x26; blog option. Because:</p>\n<ol>\n<li>A custom personal website allows maximum creativity, a great advantage for designers.</li>\n<li>It's blaze-fast. Because all files are generated already. It also adopts modern web technology like React, Webpack and GraphQL. I compared the Lighthouse audit ran on beta site and current site. Performance has insanely improved.</li>\n<li>Gatsby is a static site generator, but dynamic data source is widely supported. Wordpress, Contentful or even Airtable can be used as a database. </li>\n<li>Deploying is as easy as drag-and-drop. <a href=\"http://netlify.com/\">Netlify</a> provides free hosting for static site, and Gatsby is free, meaning the project could be free as long as you have your own domain.</li>\n<li>Personal reason but a good one. <strong>I admit the process of making your own site is empowering.</strong> It's nice to not rely on anybody and build a website designed and developed all by yourself. I've been taking some screenshots logging daily progress, will share it later.</li>\n</ol>\n<h2>Last word</h2>\n<p>As Gatsby is quite new since it was first released a year ago. I wouldn't say current resources available is sufficient, but it is a strong and growing community. Most users are frontend web developer right now, but I'm optimistic to see more designers onboard.</p>\n<p>I admit there is indeed a learning curve to React, Gatsby and also GraphQL since I know fundamental HTML and CSS only. There were long nights that I was figuring out causes of errors, which turned out to be some stupid mistakes. </p>\n<p>I'm writing this also for my own future reference:</p>\n<blockquote>\n<p>A personal website should not only showcase your work, but also speak who you are and how you work.</p>\n</blockquote>\n<p>That's why I'm eager to share my work in progress, hoping to launch the site as soon as possible. </p>\n<h5>Reading List:</h5>\n<h5><a href=\"https://uxdesign.cc/things-i-honestly-dont-want-to-see-in-your-portfolio-3d3497666ca8\">Things I (honestly) don’t want to see in your portfolio</a></h5>","excerpt":"TLDR: I'm summing up the reasons why a designer should build a custom site using Gatsby.JS.  One of my year resolution for 2018 is to learn front-end coding. I feel that being a designer, learning how to code is the way how I could step up the game…","frontmatter":{"title":"Why designers need a personal website?","date":"Aug 26, 2018","tags":["Work In Progress","Design","Gatsby"],"path":"/why-designers-need-a-personal-website"}}}]}},"pageContext":{"tag":"Work In Progress"}}